import { useContext, useCallback } from 'react'
import NotificationContext from '@/contexts/NotificationContext'

/**
 * Hook personalizado para manejar notificaciones
 * Proporciona funciones optimizadas para diferentes tipos de notificaciones
 */
export const useNotification = () => {
  const context = useContext(NotificationContext)
  
  if (!context) {
    throw new Error('useNotification debe ser usado dentro de NotificationProvider')
  }

  // Funciones espec√≠ficas para la aplicaci√≥n
  const showLoginSuccess = useCallback((userName = 'Usuario') => {
    return context.success(
      '¬°Bienvenido!',
      `Hola ${userName}, has ingresado correctamente`,
      {
        icon: 'üéâ',
        duration: 4000,
        action: {
          label: 'Ir al Dashboard',
          onClick: () => {
            // Esta funci√≥n se puede personalizar desde el componente
            console.log('Navigate to dashboard')
          },
        },
      }
    )
  }, [context])

  const showLoginError = useCallback((error = 'Credenciales incorrectas') => {
    return context.error(
      'Error de Acceso',
      error,
      {
        icon: 'üîí',
        duration: 6000,
        action: {
          label: 'Reintentar',
          onClick: () => {
            console.log('Retry login')
          },
        },
      }
    )
  }, [context])

  const show2FACodeSent = useCallback((method = 'email', contact = '') => {
    const methodText = method === 'sms' ? 'SMS' : 'email'
    const contactText = contact ? ` a ${contact}` : ''
    
    return context.info(
      'C√≥digo Enviado',
      `Te hemos enviado un c√≥digo de verificaci√≥n por ${methodText}${contactText}`,
      {
        icon: method === 'sms' ? 'üì±' : 'üìß',
        duration: 5000,
        action: {
          label: 'Reenviar',
          onClick: () => {
            console.log('Resend code')
          },
        },
      }
    )
  }, [context])

  const show2FASuccess = useCallback(() => {
    return context.success(
      'Verificaci√≥n Exitosa',
      'Tu identidad ha sido verificada correctamente',
      {
        icon: '‚úÖ',
        duration: 3000,
      }
    )
  }, [context])

  const show2FAError = useCallback((error = 'C√≥digo incorrecto') => {
    return context.error(
      'Verificaci√≥n Fallida',
      error,
      {
        icon: '‚ùå',
        duration: 5000,
        action: {
          label: 'Intentar de nuevo',
          onClick: () => {
            console.log('Retry 2FA')
          },
        },
      }
    )
  }, [context])

  const showBiometricSuccess = useCallback(() => {
    return context.success(
      'Autenticaci√≥n Biom√©trica',
      'Identidad verificada con √©xito',
      {
        icon: 'üë§',
        duration: 3000,
      }
    )
  }, [context])

  const showBiometricError = useCallback((error = 'No se pudo verificar la identidad biom√©trica') => {
    return context.error(
      'Error Biom√©trico',
      error,
      {
        icon: 'üö´',
        duration: 6000,
        action: {
          label: 'Usar contrase√±a',
          onClick: () => {
            console.log('Switch to password')
          },
        },
      }
    )
  }, [context])

  const showSecurityAlert = useCallback((title, message, severity = 'high') => {
    return context.security(
      title,
      message,
      {
        icon: severity === 'high' ? 'üö®' : severity === 'medium' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è',
        persistent: severity === 'high',
        action: {
          label: 'Ver Detalles',
          onClick: () => {
            console.log('View security details')
          },
        },
      }
    )
  }, [context])

  const showPasswordChanged = useCallback(() => {
    return context.success(
      'Contrase√±a Actualizada',
      'Tu contrase√±a ha sido cambiada exitosamente',
      {
        icon: 'üîê',
        duration: 4000,
      }
    )
  }, [context])

  const showProfileUpdated = useCallback(() => {
    return context.success(
      'Perfil Actualizado',
      'Tus datos han sido guardados correctamente',
      {
        icon: 'üë§',
        duration: 3000,
      }
    )
  }, [context])

  const showLogoutSuccess = useCallback(() => {
    return context.info(
      'Sesi√≥n Cerrada',
      'Has cerrado sesi√≥n de forma segura',
      {
        icon: 'üëã',
        duration: 3000,
      }
    )
  }, [context])

  const showNetworkError = useCallback(() => {
    return context.error(
      'Error de Conexi√≥n',
      'Verifica tu conexi√≥n a internet e intenta nuevamente',
      {
        icon: 'üåê',
        duration: 6000,
        action: {
          label: 'Reintentar',
          onClick: () => {
            window.location.reload()
          },
        },
      }
    )
  }, [context])

  const showMaintenanceMode = useCallback(() => {
    return context.warning(
      'Mantenimiento Programado',
      'El sistema estar√° en mantenimiento en 10 minutos',
      {
        icon: 'üîß',
        persistent: true,
        action: {
          label: 'M√°s info',
          onClick: () => {
            console.log('Show maintenance info')
          },
        },
      }
    )
  }, [context])

  const showSessionExpiring = useCallback((minutesLeft = 5) => {
    return context.warning(
      'Sesi√≥n por Expirar',
      `Tu sesi√≥n expirar√° en ${minutesLeft} minutos`,
      {
        icon: '‚è∞',
        duration: 10000,
        action: {
          label: 'Extender Sesi√≥n',
          onClick: () => {
            console.log('Extend session')
          },
        },
      }
    )
  }, [context])

  const showDataSaved = useCallback(callback => {
    return context.success(
      'Datos Guardados',
      'Los cambios han sido guardados autom√°ticamente',
      {
        icon: 'üíæ',
        duration: 2000,
      }
    )
  }, [context])

  const showUpgradeRequired = useCallback(() => {
    return context.info(
      'Actualizaci√≥n Disponible',
      'Hay una nueva versi√≥n disponible para mejorar la seguridad',
      {
        icon: 'üîÑ',
        persistent: true,
        action: {
          label: 'Actualizar',
          onClick: () => {
            window.location.reload()
          },
        },
      }
    )
  }, [context])

  const showFeatureComingSoon = useCallback((featureName = 'funci√≥n') => {
    return context.info(
      'Pr√≥ximamente',
      `La ${featureName} estar√° disponible pronto`,
      {
        icon: 'üöÄ',
        duration: 4000,
      }
    )
  }, [context])

  // Funci√≥n gen√©rica para mostrar progreso
  const showProgress = useCallback((title, message, progress = 0) => {
    return context.info(
      title,
      `${message} (${progress}%)`,
      {
        icon: '‚è≥',
        persistent: true,
        // Se puede actualizar el progreso usando context.update
      }
    )
  }, [context])

  // Funci√≥n para mostrar confirmaci√≥n de acci√≥n destructiva
  const showDestructiveAction = useCallback((title, message, onConfirm) => {
    return context.warning(
      title,
      message,
      {
        icon: '‚ö†Ô∏è',
        persistent: true,
        action: {
          label: 'Confirmar',
          onClick: onConfirm,
          destructive: true,
        },
      }
    )
  }, [context])

  return {
    // Funciones del contexto base
    ...context,
    
    // Funciones espec√≠ficas de la aplicaci√≥n
    showLoginSuccess,
    showLoginError,
    show2FACodeSent,
    show2FASuccess,
    show2FAError,
    showBiometricSuccess,
    showBiometricError,
    showSecurityAlert,
    showPasswordChanged,
    showProfileUpdated,
    showLogoutSuccess,
    showNetworkError,
    showMaintenanceMode,
    showSessionExpiring,
    showDataSaved,
    showUpgradeRequired,
    showFeatureComingSoon,
    showProgress,
    showDestructiveAction,
  }
}

export default useNotification